{
  "address": "0xf1CEFe1b28ee6768597f177eca6616aD44C96418",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_validators",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "email",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "AcceptedRequestItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "email",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "AddedRequestItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "email",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "RejectedRequestItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "email",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet2",
          "type": "address"
        }
      ],
      "name": "UpdatedLinkItem",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NULL",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_email",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "addRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "nonceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_email",
          "type": "bytes32"
        }
      ],
      "name": "toAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "toEmail",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_email",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_wallet1",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature1",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_wallet2",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature2",
          "type": "bytes"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "enum LinkCollection.Ballot",
          "name": "_ballot",
          "type": "uint8"
        }
      ],
      "name": "voteRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x231c06f81a68be6801c315dfe3fd6f2684bb90a7652b713426906128138f4886",
  "receipt": {
    "to": null,
    "from": "0x8CA2D0080a42DB61cbe59611551412D294FC5911",
    "contractAddress": "0xf1CEFe1b28ee6768597f177eca6616aD44C96418",
    "transactionIndex": 0,
    "gasUsed": "1343371",
    "logsBloom": "0x
    "blockHash": "0x23415e067fff961dc647e729927150971b73bc9358c0334f158b40de938035c9",
    "transactionHash": "0x231c06f81a68be6801c315dfe3fd6f2684bb90a7652b713426906128138f4886",
    "logs": [],
    "blockNumber": 10,
    "cumulativeGasUsed": "1343371",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xc86c00147049695C3Cad5eA4ebb75B6bd4f09126"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "0cef2b85beb54fed164e54d26dc2b571",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AcceptedRequestItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AddedRequestItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"RejectedRequestItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet2\",\"type\":\"address\"}],\"name\":\"UpdatedLinkItem\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NULL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_email\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"addRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"nonceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_email\",\"type\":\"bytes32\"}],\"name\":\"toAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"toEmail\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_email\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_wallet1\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature1\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_wallet2\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature2\",\"type\":\"bytes\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"enum LinkCollection.Ballot\",\"name\":\"_ballot\",\"type\":\"uint8\"}],\"name\":\"voteRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addRequest(bytes32,address,bytes)\":{\"params\":{\"_email\":\"\\uc774\\uba54\\uc77c\\uc758 \\ud574\\uc2dc\",\"_signature\":\"\\uc9c0\\uac11\\uc8fc\\uc18c\\uc758 \\uc11c\\uba85\",\"_wallet\":\"\\uc9c0\\uac11\\uc8fc\\uc18c\"}},\"constructor\":{\"params\":{\"_validators\":\"\\uac80\\uc99d\\uc790\\ub4e4\"}},\"nonceOf(address)\":{\"params\":{\"_wallet\":\"\\uc9c0\\uac11\\uc8fc\\uc18c\"}},\"toAddress(bytes32)\":{\"params\":{\"_email\":\"\\uc774\\uba54\\uc77c\\uc758 \\ud574\\uc2dc\"}},\"toEmail(address)\":{\"params\":{\"_wallet\":\"\\uc9c0\\uac11\\uc8fc\\uc18c\"}},\"update(bytes32,address,bytes,address,bytes)\":{\"params\":{\"_email\":\"\\uc774\\uba54\\uc77c\\uc758 \\ud574\\uc2dc\",\"_signature1\":\"\\ud604\\uc7ac \\uc9c0\\uac11\\uc8fc\\uc18c\\uc758 \\uc11c\\uba85\",\"_signature2\":\"\\uc0c8\\ub85c\\uc6b4 \\uc9c0\\uac11\\uc8fc\\uc18c\\uc758 \\uc11c\\uba85\",\"_wallet1\":\"\\ud604\\uc7ac \\uc9c0\\uac11\\uc8fc\\uc18c\",\"_wallet2\":\"\\uc0c8\\ub85c\\uc6b4 \\uc9c0\\uac11\\uc8fc\\uc18c\"}},\"voteRequest(uint256,uint8)\":{\"params\":{\"_ballot\":\"\\uc774\\uba54\\uc77c \\uac80\\uc99d\\uacb0\\uacfc\",\"_id\":\"\\uc694\\uccad \\uc544\\uc774\\ub514\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AcceptedRequestItem(uint256,bytes32,address)\":{\"notice\":\"\\ub4f1\\ub85d\\uc694\\uccad\\uc774 \\uc2b9\\uc778\\ub41c \\ud6c4 \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\"},\"AddedRequestItem(uint256,bytes32,address)\":{\"notice\":\"\\ub4f1\\ub85d\\uc694\\uccad\\uc778 \\uc644\\ub8cc\\ub41c \\ud6c4 \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\"},\"RejectedRequestItem(uint256,bytes32,address)\":{\"notice\":\"\\ub4f1\\ub85d\\uc694\\uccad\\uc774 \\uac70\\ubd80\\ub41c \\ud6c4 \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\"},\"UpdatedLinkItem(bytes32,address,address)\":{\"notice\":\"\\ud56d\\ubaa9\\uc774 \\uc5c5\\ub370\\uc774\\ud2b8 \\ud6c4 \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\"}},\"kind\":\"user\",\"methods\":{\"addRequest(bytes32,address,bytes)\":{\"notice\":\"\\uc774\\uba54\\uc77c-\\uc9c0\\uac11\\uc8fc\\uc18c \\ud56d\\ubaa9\\uc758 \\ub4f1\\ub85d\\uc744 \\uc694\\uccad\\ud55c\\ub2e4\"},\"constructor\":{\"notice\":\"\\uc0dd\\uc131\\uc790\"},\"nonceOf(address)\":{\"notice\":\"nonce\\ub97c  \\ub9ac\\ud134\\ud55c\\ub2e4\"},\"toAddress(bytes32)\":{\"notice\":\"\\uc774\\uba54\\uc77c\\ud574\\uc2dc\\uc640 \\uc5f0\\uacb0\\ub41c \\uc9c0\\uac11\\uc8fc\\uc18c\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4.\"},\"toEmail(address)\":{\"notice\":\"\\uc9c0\\uac11\\uc8fc\\uc18c\\uc640 \\uc5f0\\uacb0\\ub41c \\uc774\\uba54\\uc77c\\ud574\\uc2dc\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4.\"},\"update(bytes32,address,bytes,address,bytes)\":{\"notice\":\"\\uc774\\uba54\\uc77c-\\uc9c0\\uac11\\uc8fc\\uc18c \\ud56d\\ubaa9\\uc744 \\uc5c5\\ub370\\uc774\\ud2b8 \\ud55c\\ub2e4\"},\"voteRequest(uint256,uint8)\":{\"notice\":\"\\uac80\\uc99d\\uc790\\ub4e4\\uc774 \\uc774\\uba54\\uc77c \\uac80\\uc99d\\uacb0\\uacfc\\ub97c \\ub4f1\\ub85d\\ud55c\\ub2e4.\"}},\"notice\":\"Contract for converting e-mail to wallet\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LinkCollection.sol\":\"LinkCollection\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/LinkCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n// E000 : invalid signature\\n// E001 : invalid email hash\\n// E002 : invalid address\\n// E003 : not validator\\n\\n/// Contract for converting e-mail to wallet\\ncontract LinkCollection {\\n    bytes32 public constant NULL = 0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855;\\n\\n    mapping(bytes32 => address) private emailToAddress;\\n    mapping(address => bytes32) private addressToEmail;\\n    mapping(address => uint256) private nonce;\\n\\n    /// @notice \\uc694\\uccad \\uc544\\uc774\\ud15c\\uc758 \\uc0c1\\ud0dc\\ucf54\\ub4dc\\n    enum RequestStatus {\\n        INVALID,\\n        REQUESTED,\\n        ACCEPTED,\\n        REJECTED\\n    }\\n\\n    struct RequestItem {\\n        uint256 id;\\n        bytes32 email;\\n        address wallet;\\n        bytes signature;\\n        uint32 agreement;\\n        uint32 opposition;\\n        uint32 abstaining;\\n        mapping(address => Ballot) ballots;\\n        RequestStatus status;\\n    }\\n    mapping(uint256 => RequestItem) private requests;\\n\\n    enum Ballot {\\n        NONE,\\n        AGREEMENT,\\n        OPPOSITION,\\n        ABSTAINING\\n    }\\n\\n    uint256 private quorum;\\n    uint256 private latestId;\\n\\n    /// @notice \\uac80\\uc99d\\uc790\\uc758 \\uc0c1\\ud0dc\\ucf54\\ub4dc\\n    enum ValidatorStatus {\\n        INVALID, //  \\ucd08\\uae30\\uac12\\n        ACTIVE //  \\uac80\\uc99d\\uc790\\uc758 \\uae30\\ub2a5\\uc774 \\ud65c\\uc131\\ud654\\ub428\\n    }\\n\\n    struct ValidatorItem {\\n        address validator; // \\uac80\\uc99d\\uc790\\uc758 \\uc9c0\\uac11\\uc8fc\\uc18c\\n        ValidatorStatus status; // \\uac80\\uc99d\\uc790\\uc758 \\uc0c1\\ud0dc\\n    }\\n\\n    mapping(address => ValidatorItem) private validators;\\n    address[] private validatorItems;\\n\\n    /// @notice \\ub4f1\\ub85d\\uc694\\uccad\\uc778 \\uc644\\ub8cc\\ub41c \\ud6c4 \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event AddedRequestItem(uint256 id, bytes32 email, address wallet);\\n    /// @notice \\ub4f1\\ub85d\\uc694\\uccad\\uc774 \\uc2b9\\uc778\\ub41c \\ud6c4 \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event AcceptedRequestItem(uint256 id, bytes32 email, address wallet);\\n    /// @notice \\ub4f1\\ub85d\\uc694\\uccad\\uc774 \\uac70\\ubd80\\ub41c \\ud6c4 \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event RejectedRequestItem(uint256 id, bytes32 email, address wallet);\\n    /// @notice \\ud56d\\ubaa9\\uc774 \\uc5c5\\ub370\\uc774\\ud2b8 \\ud6c4 \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event UpdatedLinkItem(bytes32 email, address wallet1, address wallet2);\\n\\n    /// @notice \\uc0dd\\uc131\\uc790\\n    /// @param _validators \\uac80\\uc99d\\uc790\\ub4e4\\n    constructor(address[] memory _validators) {\\n        for (uint256 i = 0; i < _validators.length; ++i) {\\n            ValidatorItem memory item = ValidatorItem({ validator: _validators[i], status: ValidatorStatus.ACTIVE });\\n            validatorItems.push(_validators[i]);\\n            validators[_validators[i]] = item;\\n        }\\n\\n        quorum = uint256(2000) / uint256(3);\\n        latestId = 0;\\n    }\\n\\n    /// @notice \\uac80\\uc99d\\uc790\\ub4e4\\ub9cc \\ud638\\ucd9c\\ud560 \\uc218 \\uc788\\ub3c4\\ub85d \\ud574\\uc900\\ub2e4.\\n    modifier onlyValidator() {\\n        require(validators[msg.sender].status == ValidatorStatus.ACTIVE, \\\"E003\\\");\\n        _;\\n    }\\n\\n    /// @notice \\uc774\\uba54\\uc77c-\\uc9c0\\uac11\\uc8fc\\uc18c \\ud56d\\ubaa9\\uc744 \\uc5c5\\ub370\\uc774\\ud2b8 \\ud55c\\ub2e4\\n    /// @param _email \\uc774\\uba54\\uc77c\\uc758 \\ud574\\uc2dc\\n    /// @param _wallet1 \\ud604\\uc7ac \\uc9c0\\uac11\\uc8fc\\uc18c\\n    /// @param _signature1 \\ud604\\uc7ac \\uc9c0\\uac11\\uc8fc\\uc18c\\uc758 \\uc11c\\uba85\\n    /// @param _wallet2 \\uc0c8\\ub85c\\uc6b4 \\uc9c0\\uac11\\uc8fc\\uc18c\\n    /// @param _signature2 \\uc0c8\\ub85c\\uc6b4 \\uc9c0\\uac11\\uc8fc\\uc18c\\uc758 \\uc11c\\uba85\\n    function update(\\n        bytes32 _email,\\n        address _wallet1,\\n        bytes calldata _signature1,\\n        address _wallet2,\\n        bytes calldata _signature2\\n    ) public {\\n        require(_email != NULL, \\\"E001\\\");\\n        bytes32 dataHash1 = keccak256(abi.encode(_email, _wallet1, nonce[_wallet1]));\\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash1), _signature1) == _wallet1, \\\"E000\\\");\\n\\n        bytes32 dataHash2 = keccak256(abi.encode(_email, _wallet2, nonce[_wallet2]));\\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash2), _signature2) == _wallet2, \\\"E000\\\");\\n\\n        require(emailToAddress[_email] == _wallet1, \\\"E001\\\");\\n        require(addressToEmail[_wallet1] == _email, \\\"E002\\\");\\n        require(addressToEmail[_wallet2] == bytes32(0x00), \\\"E002\\\");\\n        require(_wallet1 != _wallet2, \\\"E002\\\");\\n\\n        delete addressToEmail[_wallet1];\\n\\n        emailToAddress[_email] = _wallet2;\\n        addressToEmail[_wallet2] = _email;\\n\\n        nonce[_wallet1]++;\\n        nonce[_wallet2]++;\\n\\n        emit UpdatedLinkItem(_email, _wallet1, _wallet2);\\n    }\\n\\n    /// @notice \\uc774\\uba54\\uc77c-\\uc9c0\\uac11\\uc8fc\\uc18c \\ud56d\\ubaa9\\uc758 \\ub4f1\\ub85d\\uc744 \\uc694\\uccad\\ud55c\\ub2e4\\n    /// @param _email \\uc774\\uba54\\uc77c\\uc758 \\ud574\\uc2dc\\n    /// @param _wallet \\uc9c0\\uac11\\uc8fc\\uc18c\\n    /// @param _signature \\uc9c0\\uac11\\uc8fc\\uc18c\\uc758 \\uc11c\\uba85\\n    function addRequest(bytes32 _email, address _wallet, bytes calldata _signature) public {\\n        require(_email != NULL, \\\"E001\\\");\\n        bytes32 dataHash = keccak256(abi.encode(_email, _wallet, nonce[_wallet]));\\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash), _signature) == _wallet, \\\"E000\\\");\\n\\n        require(emailToAddress[_email] == address(0x00), \\\"E001\\\");\\n        require(addressToEmail[_wallet] == bytes32(0x00), \\\"E002\\\");\\n\\n        nonce[_wallet]++;\\n\\n        uint256 id = latestId++;\\n        requests[id].id = id;\\n        requests[id].email = _email;\\n        requests[id].wallet = _wallet;\\n        requests[id].signature = _signature;\\n        requests[id].status = RequestStatus.REQUESTED;\\n\\n        emit AddedRequestItem(id, _email, _wallet);\\n    }\\n\\n    /// @notice \\uac80\\uc99d\\uc790\\ub4e4\\uc774 \\uc774\\uba54\\uc77c \\uac80\\uc99d\\uacb0\\uacfc\\ub97c \\ub4f1\\ub85d\\ud55c\\ub2e4.\\n    /// @param _id \\uc694\\uccad \\uc544\\uc774\\ub514\\n    /// @param _ballot \\uc774\\uba54\\uc77c \\uac80\\uc99d\\uacb0\\uacfc\\n    function voteRequest(uint _id, Ballot _ballot) public onlyValidator {\\n        require(requests[_id].status != RequestStatus.INVALID, \\\"\\\");\\n\\n        if (requests[_id].status != RequestStatus.ACCEPTED) {\\n            if (requests[_id].ballots[msg.sender] != _ballot) {\\n                if (requests[_id].ballots[msg.sender] == Ballot.AGREEMENT) {\\n                    requests[_id].agreement--;\\n                } else if (requests[_id].ballots[msg.sender] == Ballot.OPPOSITION) {\\n                    requests[_id].opposition--;\\n                } else if (requests[_id].ballots[msg.sender] == Ballot.ABSTAINING) {\\n                    requests[_id].abstaining--;\\n                }\\n                if (_ballot == Ballot.AGREEMENT) {\\n                    requests[_id].agreement++;\\n                } else if (_ballot == Ballot.OPPOSITION) {\\n                    requests[_id].opposition++;\\n                } else {\\n                    requests[_id].abstaining++;\\n                }\\n\\n                if ((requests[_id].agreement * 1000) / validatorItems.length >= quorum) {\\n                    if (\\n                        emailToAddress[requests[_id].email] == address(0x00) &&\\n                        addressToEmail[requests[_id].wallet] == bytes32(0x00)\\n                    ) {\\n                        emailToAddress[requests[_id].email] = requests[_id].wallet;\\n                        addressToEmail[requests[_id].wallet] = requests[_id].email;\\n                        requests[_id].status = RequestStatus.ACCEPTED;\\n                        emit AcceptedRequestItem(requests[_id].id, requests[_id].email, requests[_id].wallet);\\n                    } else {\\n                        requests[_id].status = RequestStatus.REJECTED;\\n                        emit RejectedRequestItem(requests[_id].id, requests[_id].email, requests[_id].wallet);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice \\uc774\\uba54\\uc77c\\ud574\\uc2dc\\uc640 \\uc5f0\\uacb0\\ub41c \\uc9c0\\uac11\\uc8fc\\uc18c\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4.\\n    /// @param _email \\uc774\\uba54\\uc77c\\uc758 \\ud574\\uc2dc\\n    function toAddress(bytes32 _email) public view returns (address) {\\n        return emailToAddress[_email];\\n    }\\n\\n    /// @notice \\uc9c0\\uac11\\uc8fc\\uc18c\\uc640 \\uc5f0\\uacb0\\ub41c \\uc774\\uba54\\uc77c\\ud574\\uc2dc\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4.\\n    /// @param _wallet \\uc9c0\\uac11\\uc8fc\\uc18c\\n    function toEmail(address _wallet) public view returns (bytes32) {\\n        return addressToEmail[_wallet];\\n    }\\n\\n    /// @notice nonce\\ub97c  \\ub9ac\\ud134\\ud55c\\ub2e4\\n    /// @param _wallet \\uc9c0\\uac11\\uc8fc\\uc18c\\n    function nonceOf(address _wallet) public view returns (uint256) {\\n        return nonce[_wallet];\\n    }\\n}\\n\",\"keccak256\":\"0x892ec5ab2ae46ee421862acce711976aed87c939edf7f27b5da9b4741de399fe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620018b7380380620018b78339810160408190526200003491620001fe565b60005b8151811015620001c257600060405180604001604052808484815181106200006f57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03168152602001600180811115620000a657634e487b7160e01b600052602160045260246000fd5b81525090506007838381518110620000ce57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518254600181018455600093845291832090910180546001600160a01b0319166001600160a01b03909216919091179055835182916006918690869081106200013257634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b039081168352828201939093526040909101600020835181546001600160a01b0319169316929092178083559083015190829060ff60a01b1916600160a01b836001811115620001a557634e487b7160e01b600052602160045260246000fd5b02179055509050505080620001ba90620002ed565b905062000037565b50620001d260036107d0620002cc565b6004555060006005556200032b565b80516001600160a01b0381168114620001f957600080fd5b919050565b6000602080838503121562000211578182fd5b82516001600160401b038082111562000228578384fd5b818501915085601f8301126200023c578384fd5b81518181111562000251576200025162000315565b8381026040518582820101818110858211171562000273576200027362000315565b604052828152858101935084860182860187018a101562000292578788fd5b8795505b83861015620002bf57620002aa81620001e1565b85526001959095019493860193860162000296565b5098975050505050505050565b600082620002e857634e487b7160e01b81526012600452602481fd5b500490565b60006000198214156200030e57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b61157c806200033b6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a0c58f6a1161005b578063a0c58f6a146100e0578063bd3f40ad146100f3578063ed2a2d6414610106578063f26be3fc146101195761007d565b806318907d4c14610082578063341f6623146100ab5780634df9d558146100cb575b600080fd5b61009561009036600461109c565b610121565b6040516100a2919061120e565b60405180910390f35b6100be6100b93660046110bd565b610140565b6040516100a291906111fa565b6100de6100d93660046111c8565b61015b565b005b6100de6100ee3660046110d5565b61073b565b6100de61010136600461112d565b610997565b61009561011436600461109c565b610d0b565b610095610d26565b6001600160a01b0381166000908152600160205260409020545b919050565b6000908152602081905260409020546001600160a01b031690565b60013360009081526006602052604090205474010000000000000000000000000000000000000000900460ff1660018111156101a757634e487b7160e01b600052602160045260246000fd5b146101cd5760405162461bcd60e51b81526004016101c4906112aa565b60405180910390fd5b600082815260036020819052604082206006015460ff169081111561020257634e487b7160e01b600052602160045260246000fd5b14156102205760405162461bcd60e51b81526004016101c49061141a565b600260008381526003602081905260409091206006015460ff169081111561025857634e487b7160e01b600052602160045260246000fd5b146107375780600381111561027d57634e487b7160e01b600052602160045260246000fd5b60008381526003602081815260408084203385526005019091529091205460ff16908111156102bc57634e487b7160e01b600052602160045260246000fd5b1461073757600160008381526003602081815260408084203385526005019091529091205460ff169081111561030257634e487b7160e01b600052602160045260246000fd5b141561034f576000828152600360205260408120600401805463ffffffff169161032b83611496565b91906101000a81548163ffffffff021916908363ffffffff16021790555050610459565b600260008381526003602081815260408084203385526005019091529091205460ff169081111561039057634e487b7160e01b600052602160045260246000fd5b14156103c357600082815260036020526040902060049081018054640100000000900463ffffffff169161032b83611496565b60008281526003602081815260408084203385526005019091529091205460ff168181111561040257634e487b7160e01b600052602160045260246000fd5b1415610459576000828152600360205260409020600401805468010000000000000000900463ffffffff1690600861043983611496565b91906101000a81548163ffffffff021916908363ffffffff160217905550505b600181600381111561047b57634e487b7160e01b600052602160045260246000fd5b14156104c8576000828152600360205260408120600401805463ffffffff16916104a48361150c565b91906101000a81548163ffffffff021916908363ffffffff1602179055505061056e565b60028160038111156104ea57634e487b7160e01b600052602160045260246000fd5b141561051d57600082815260036020526040902060049081018054640100000000900463ffffffff16916104a48361150c565b6000828152600360205260409020600401805468010000000000000000900463ffffffff1690600861054e8361150c565b91906101000a81548163ffffffff021916908363ffffffff160217905550505b6004805460075460008581526003602052604090209092015490919061059c9063ffffffff166103e861146a565b63ffffffff166105ac919061144a565b10610737576000828152600360209081526040808320600101548352908290529020546001600160a01b031615801561060a57506000828152600360209081526040808320600201546001600160a01b031683526001909152902054155b156106c557600082815260036020818152604080842060028082018054600180850180548a52898852868a20805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0394851617905554835483168a52908752858920819055978a90529590945260068201805460ff1916909117905554915490517f372e9b969935cbc67f594f69ec66354a4b176bedc9d0ed9745543deea1c7e8eb946106b8949092169061142b565b60405180910390a1610737565b60008281526003602081905260409182902060068101805460ff19169092179091558054600182015460029092015492517f1313817a5b5b3a2818949b6784018856aa5e4fa5315f50863764eb10ce4912389361072e93916001600160a01b039091169061142b565b60405180910390a15b5050565b7fe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85584141561077b5760405162461bcd60e51b81526004016101c490611318565b6001600160a01b03831660009081526002602090815260408083205490516107a99288928892909101611236565b604051602081830303815290604052805190602001209050836001600160a01b03166108136107d783610d4a565b85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d7d92505050565b6001600160a01b0316146108395760405162461bcd60e51b81526004016101c4906113e3565b6000858152602081905260409020546001600160a01b03161561086e5760405162461bcd60e51b81526004016101c490611318565b6001600160a01b038416600090815260016020526040902054156108a45760405162461bcd60e51b81526004016101c49061134f565b6001600160a01b03841660009081526002602052604081208054916108c8836114f1565b909155505060058054600091826108de836114f1565b9091555060008181526003602081905260409091208281556001810189905560028101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038a1617905591925061093691018585610fac565b5060008181526003602052604090819020600601805460ff19166001179055517f2d7a17729b83427702dece33372de9fc030d9563a52635e4213e9b829fdf29f4906109879083908990899061142b565b60405180910390a1505050505050565b7fe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b8558714156109d75760405162461bcd60e51b81526004016101c490611318565b6001600160a01b0386166000908152600260209081526040808320549051610a05928b928b92909101611236565b604051602081830303815290604052805190602001209050866001600160a01b0316610a6f610a3383610d4a565b88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d7d92505050565b6001600160a01b031614610a955760405162461bcd60e51b81526004016101c4906113e3565b6001600160a01b0384166000908152600260209081526040808320549051610ac3928c928992909101611236565b604051602081830303815290604052805190602001209050846001600160a01b0316610b2d610af183610d4a565b86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d7d92505050565b6001600160a01b031614610b535760405162461bcd60e51b81526004016101c4906113e3565b6000898152602081905260409020546001600160a01b03898116911614610b8c5760405162461bcd60e51b81526004016101c490611318565b6001600160a01b0388166000908152600160205260409020548914610bc35760405162461bcd60e51b81526004016101c49061134f565b6001600160a01b03851660009081526001602052604090205415610bf95760405162461bcd60e51b81526004016101c49061134f565b846001600160a01b0316886001600160a01b03161415610c2b5760405162461bcd60e51b81526004016101c49061134f565b6001600160a01b0388811660008181526001602081815260408084208490558e8452838252808420805473ffffffffffffffffffffffffffffffffffffffff1916968c1696871790559483529081528382208d90559181526002909152908120805491610c97836114f1565b90915550506001600160a01b0385166000908152600260205260408120805491610cc0836114f1565b91905055507f8a4b6de0e358a86faed83ac3b603f7ba1e7024b1246c919dc9655df0af150ba8898987604051610cf893929190611217565b60405180910390a1505050505050505050565b6001600160a01b031660009081526002602052604090205490565b7fe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85581565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b6000806000610d8c8585610da1565b91509150610d9981610de7565b509392505050565b600080825160411415610dd85760208301516040840151606085015160001a610dcc87828585610ed7565b94509450505050610de0565b506000905060025b9250929050565b6000816004811115610e0957634e487b7160e01b600052602160045260246000fd5b1415610e1457610ed4565b6001816004811115610e3657634e487b7160e01b600052602160045260246000fd5b1415610e545760405162461bcd60e51b81526004016101c490611273565b6002816004811115610e7657634e487b7160e01b600052602160045260246000fd5b1415610e945760405162461bcd60e51b81526004016101c4906112e1565b6003816004811115610eb657634e487b7160e01b600052602160045260246000fd5b1415610ed45760405162461bcd60e51b81526004016101c490611386565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610f0e5750600090506003610fa3565b600060018787878760405160008152602001604052604051610f339493929190611255565b6020604051602081039080840390855afa158015610f55573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b038116610f9c57600060019250925050610fa3565b9150600090505b94509492505050565b828054610fb8906114b6565b90600052602060002090601f016020900481019282610fda5760008555611020565b82601f10610ff35782800160ff19823516178555611020565b82800160010185558215611020579182015b82811115611020578235825591602001919060010190611005565b5061102c929150611030565b5090565b5b8082111561102c5760008155600101611031565b80356001600160a01b038116811461013b57600080fd5b60008083601f84011261106d578182fd5b50813567ffffffffffffffff811115611084578182fd5b602083019150836020828501011115610de057600080fd5b6000602082840312156110ad578081fd5b6110b682611045565b9392505050565b6000602082840312156110ce578081fd5b5035919050565b600080600080606085870312156110ea578283fd5b843593506110fa60208601611045565b9250604085013567ffffffffffffffff811115611115578283fd5b6111218782880161105c565b95989497509550505050565b600080600080600080600060a0888a031215611147578283fd5b8735965061115760208901611045565b9550604088013567ffffffffffffffff80821115611173578485fd5b61117f8b838c0161105c565b909750955085915061119360608b01611045565b945060808a01359150808211156111a8578384fd5b506111b58a828b0161105c565b989b979a50959850939692959293505050565b600080604083850312156111da578182fd5b823591506020830135600481106111ef578182fd5b809150509250929050565b6001600160a01b0391909116815260200190565b90815260200190565b9283526001600160a01b03918216602084015216604082015260600190565b9283526001600160a01b03919091166020830152604082015260600190565b93845260ff9290921660208401526040830152606082015260800190565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b60208082526004908201527f4530303300000000000000000000000000000000000000000000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526004908201527f4530303100000000000000000000000000000000000000000000000000000000604082015260600190565b60208082526004908201527f4530303200000000000000000000000000000000000000000000000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60408201527f7565000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526004908201527f4530303000000000000000000000000000000000000000000000000000000000604082015260600190565b602080825260009082015260400190565b92835260208301919091526001600160a01b0316604082015260600190565b60008261146557634e487b7160e01b81526012600452602481fd5b500490565b600063ffffffff8083168185168183048111821515161561148d5761148d611530565b02949350505050565b600063ffffffff8216806114ac576114ac611530565b6000190192915050565b6002810460018216806114ca57607f821691505b602082108114156114eb57634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561150557611505611530565b5060010190565b600063ffffffff8083168181141561152657611526611530565b6001019392505050565b634e487b7160e01b600052601160045260246000fdfea26469706673582212203ad18ff701ab9b959edfbee37cbe648204aaa79abe10a2d3b086025c088efe5964736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a0c58f6a1161005b578063a0c58f6a146100e0578063bd3f40ad146100f3578063ed2a2d6414610106578063f26be3fc146101195761007d565b806318907d4c14610082578063341f6623146100ab5780634df9d558146100cb575b600080fd5b61009561009036600461109c565b610121565b6040516100a2919061120e565b60405180910390f35b6100be6100b93660046110bd565b610140565b6040516100a291906111fa565b6100de6100d93660046111c8565b61015b565b005b6100de6100ee3660046110d5565b61073b565b6100de61010136600461112d565b610997565b61009561011436600461109c565b610d0b565b610095610d26565b6001600160a01b0381166000908152600160205260409020545b919050565b6000908152602081905260409020546001600160a01b031690565b60013360009081526006602052604090205474010000000000000000000000000000000000000000900460ff1660018111156101a757634e487b7160e01b600052602160045260246000fd5b146101cd5760405162461bcd60e51b81526004016101c4906112aa565b60405180910390fd5b600082815260036020819052604082206006015460ff169081111561020257634e487b7160e01b600052602160045260246000fd5b14156102205760405162461bcd60e51b81526004016101c49061141a565b600260008381526003602081905260409091206006015460ff169081111561025857634e487b7160e01b600052602160045260246000fd5b146107375780600381111561027d57634e487b7160e01b600052602160045260246000fd5b60008381526003602081815260408084203385526005019091529091205460ff16908111156102bc57634e487b7160e01b600052602160045260246000fd5b1461073757600160008381526003602081815260408084203385526005019091529091205460ff169081111561030257634e487b7160e01b600052602160045260246000fd5b141561034f576000828152600360205260408120600401805463ffffffff169161032b83611496565b91906101000a81548163ffffffff021916908363ffffffff16021790555050610459565b600260008381526003602081815260408084203385526005019091529091205460ff169081111561039057634e487b7160e01b600052602160045260246000fd5b14156103c357600082815260036020526040902060049081018054640100000000900463ffffffff169161032b83611496565b60008281526003602081815260408084203385526005019091529091205460ff168181111561040257634e487b7160e01b600052602160045260246000fd5b1415610459576000828152600360205260409020600401805468010000000000000000900463ffffffff1690600861043983611496565b91906101000a81548163ffffffff021916908363ffffffff160217905550505b600181600381111561047b57634e487b7160e01b600052602160045260246000fd5b14156104c8576000828152600360205260408120600401805463ffffffff16916104a48361150c565b91906101000a81548163ffffffff021916908363ffffffff1602179055505061056e565b60028160038111156104ea57634e487b7160e01b600052602160045260246000fd5b141561051d57600082815260036020526040902060049081018054640100000000900463ffffffff16916104a48361150c565b6000828152600360205260409020600401805468010000000000000000900463ffffffff1690600861054e8361150c565b91906101000a81548163ffffffff021916908363ffffffff160217905550505b6004805460075460008581526003602052604090209092015490919061059c9063ffffffff166103e861146a565b63ffffffff166105ac919061144a565b10610737576000828152600360209081526040808320600101548352908290529020546001600160a01b031615801561060a57506000828152600360209081526040808320600201546001600160a01b031683526001909152902054155b156106c557600082815260036020818152604080842060028082018054600180850180548a52898852868a20805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0394851617905554835483168a52908752858920819055978a90529590945260068201805460ff1916909117905554915490517f372e9b969935cbc67f594f69ec66354a4b176bedc9d0ed9745543deea1c7e8eb946106b8949092169061142b565b60405180910390a1610737565b60008281526003602081905260409182902060068101805460ff19169092179091558054600182015460029092015492517f1313817a5b5b3a2818949b6784018856aa5e4fa5315f50863764eb10ce4912389361072e93916001600160a01b039091169061142b565b60405180910390a15b5050565b7fe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85584141561077b5760405162461bcd60e51b81526004016101c490611318565b6001600160a01b03831660009081526002602090815260408083205490516107a99288928892909101611236565b604051602081830303815290604052805190602001209050836001600160a01b03166108136107d783610d4a565b85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d7d92505050565b6001600160a01b0316146108395760405162461bcd60e51b81526004016101c4906113e3565b6000858152602081905260409020546001600160a01b03161561086e5760405162461bcd60e51b81526004016101c490611318565b6001600160a01b038416600090815260016020526040902054156108a45760405162461bcd60e51b81526004016101c49061134f565b6001600160a01b03841660009081526002602052604081208054916108c8836114f1565b909155505060058054600091826108de836114f1565b9091555060008181526003602081905260409091208281556001810189905560028101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038a1617905591925061093691018585610fac565b5060008181526003602052604090819020600601805460ff19166001179055517f2d7a17729b83427702dece33372de9fc030d9563a52635e4213e9b829fdf29f4906109879083908990899061142b565b60405180910390a1505050505050565b7fe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b8558714156109d75760405162461bcd60e51b81526004016101c490611318565b6001600160a01b0386166000908152600260209081526040808320549051610a05928b928b92909101611236565b604051602081830303815290604052805190602001209050866001600160a01b0316610a6f610a3383610d4a565b88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d7d92505050565b6001600160a01b031614610a955760405162461bcd60e51b81526004016101c4906113e3565b6001600160a01b0384166000908152600260209081526040808320549051610ac3928c928992909101611236565b604051602081830303815290604052805190602001209050846001600160a01b0316610b2d610af183610d4a565b86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d7d92505050565b6001600160a01b031614610b535760405162461bcd60e51b81526004016101c4906113e3565b6000898152602081905260409020546001600160a01b03898116911614610b8c5760405162461bcd60e51b81526004016101c490611318565b6001600160a01b0388166000908152600160205260409020548914610bc35760405162461bcd60e51b81526004016101c49061134f565b6001600160a01b03851660009081526001602052604090205415610bf95760405162461bcd60e51b81526004016101c49061134f565b846001600160a01b0316886001600160a01b03161415610c2b5760405162461bcd60e51b81526004016101c49061134f565b6001600160a01b0388811660008181526001602081815260408084208490558e8452838252808420805473ffffffffffffffffffffffffffffffffffffffff1916968c1696871790559483529081528382208d90559181526002909152908120805491610c97836114f1565b90915550506001600160a01b0385166000908152600260205260408120805491610cc0836114f1565b91905055507f8a4b6de0e358a86faed83ac3b603f7ba1e7024b1246c919dc9655df0af150ba8898987604051610cf893929190611217565b60405180910390a1505050505050505050565b6001600160a01b031660009081526002602052604090205490565b7fe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85581565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b6000806000610d8c8585610da1565b91509150610d9981610de7565b509392505050565b600080825160411415610dd85760208301516040840151606085015160001a610dcc87828585610ed7565b94509450505050610de0565b506000905060025b9250929050565b6000816004811115610e0957634e487b7160e01b600052602160045260246000fd5b1415610e1457610ed4565b6001816004811115610e3657634e487b7160e01b600052602160045260246000fd5b1415610e545760405162461bcd60e51b81526004016101c490611273565b6002816004811115610e7657634e487b7160e01b600052602160045260246000fd5b1415610e945760405162461bcd60e51b81526004016101c4906112e1565b6003816004811115610eb657634e487b7160e01b600052602160045260246000fd5b1415610ed45760405162461bcd60e51b81526004016101c490611386565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610f0e5750600090506003610fa3565b600060018787878760405160008152602001604052604051610f339493929190611255565b6020604051602081039080840390855afa158015610f55573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b038116610f9c57600060019250925050610fa3565b9150600090505b94509492505050565b828054610fb8906114b6565b90600052602060002090601f016020900481019282610fda5760008555611020565b82601f10610ff35782800160ff19823516178555611020565b82800160010185558215611020579182015b82811115611020578235825591602001919060010190611005565b5061102c929150611030565b5090565b5b8082111561102c5760008155600101611031565b80356001600160a01b038116811461013b57600080fd5b60008083601f84011261106d578182fd5b50813567ffffffffffffffff811115611084578182fd5b602083019150836020828501011115610de057600080fd5b6000602082840312156110ad578081fd5b6110b682611045565b9392505050565b6000602082840312156110ce578081fd5b5035919050565b600080600080606085870312156110ea578283fd5b843593506110fa60208601611045565b9250604085013567ffffffffffffffff811115611115578283fd5b6111218782880161105c565b95989497509550505050565b600080600080600080600060a0888a031215611147578283fd5b8735965061115760208901611045565b9550604088013567ffffffffffffffff80821115611173578485fd5b61117f8b838c0161105c565b909750955085915061119360608b01611045565b945060808a01359150808211156111a8578384fd5b506111b58a828b0161105c565b989b979a50959850939692959293505050565b600080604083850312156111da578182fd5b823591506020830135600481106111ef578182fd5b809150509250929050565b6001600160a01b0391909116815260200190565b90815260200190565b9283526001600160a01b03918216602084015216604082015260600190565b9283526001600160a01b03919091166020830152604082015260600190565b93845260ff9290921660208401526040830152606082015260800190565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b60208082526004908201527f4530303300000000000000000000000000000000000000000000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526004908201527f4530303100000000000000000000000000000000000000000000000000000000604082015260600190565b60208082526004908201527f4530303200000000000000000000000000000000000000000000000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60408201527f7565000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526004908201527f4530303000000000000000000000000000000000000000000000000000000000604082015260600190565b602080825260009082015260400190565b92835260208301919091526001600160a01b0316604082015260600190565b60008261146557634e487b7160e01b81526012600452602481fd5b500490565b600063ffffffff8083168185168183048111821515161561148d5761148d611530565b02949350505050565b600063ffffffff8216806114ac576114ac611530565b6000190192915050565b6002810460018216806114ca57607f821691505b602082108114156114eb57634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561150557611505611530565b5060010190565b600063ffffffff8083168181141561152657611526611530565b6001019392505050565b634e487b7160e01b600052601160045260246000fdfea26469706673582212203ad18ff701ab9b959edfbee37cbe648204aaa79abe10a2d3b086025c088efe5964736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addRequest(bytes32,address,bytes)": {
        "params": {
          "_email": "이메일의 해시",
          "_signature": "지갑주소의 서명",
          "_wallet": "지갑주소"
        }
      },
      "constructor": {
        "params": {
          "_validators": "검증자들"
        }
      },
      "nonceOf(address)": {
        "params": {
          "_wallet": "지갑주소"
        }
      },
      "toAddress(bytes32)": {
        "params": {
          "_email": "이메일의 해시"
        }
      },
      "toEmail(address)": {
        "params": {
          "_wallet": "지갑주소"
        }
      },
      "update(bytes32,address,bytes,address,bytes)": {
        "params": {
          "_email": "이메일의 해시",
          "_signature1": "현재 지갑주소의 서명",
          "_signature2": "새로운 지갑주소의 서명",
          "_wallet1": "현재 지갑주소",
          "_wallet2": "새로운 지갑주소"
        }
      },
      "voteRequest(uint256,uint8)": {
        "params": {
          "_ballot": "이메일 검증결과",
          "_id": "요청 아이디"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AcceptedRequestItem(uint256,bytes32,address)": {
        "notice": "등록요청이 승인된 후 발생되는 이벤트"
      },
      "AddedRequestItem(uint256,bytes32,address)": {
        "notice": "등록요청인 완료된 후 발생되는 이벤트"
      },
      "RejectedRequestItem(uint256,bytes32,address)": {
        "notice": "등록요청이 거부된 후 발생되는 이벤트"
      },
      "UpdatedLinkItem(bytes32,address,address)": {
        "notice": "항목이 업데이트 후 발생되는 이벤트"
      }
    },
    "kind": "user",
    "methods": {
      "addRequest(bytes32,address,bytes)": {
        "notice": "이메일-지갑주소 항목의 등록을 요청한다"
      },
      "constructor": {
        "notice": "생성자"
      },
      "nonceOf(address)": {
        "notice": "nonce를  리턴한다"
      },
      "toAddress(bytes32)": {
        "notice": "이메일해시와 연결된 지갑주소를 리턴한다."
      },
      "toEmail(address)": {
        "notice": "지갑주소와 연결된 이메일해시를 리턴한다."
      },
      "update(bytes32,address,bytes,address,bytes)": {
        "notice": "이메일-지갑주소 항목을 업데이트 한다"
      },
      "voteRequest(uint256,uint8)": {
        "notice": "검증자들이 이메일 검증결과를 등록한다."
      }
    },
    "notice": "Contract for converting e-mail to wallet",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1576,
        "contract": "contracts/LinkCollection.sol:LinkCollection",
        "label": "emailToAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 1580,
        "contract": "contracts/LinkCollection.sol:LinkCollection",
        "label": "addressToEmail",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 1584,
        "contract": "contracts/LinkCollection.sol:LinkCollection",
        "label": "nonce",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1617,
        "contract": "contracts/LinkCollection.sol:LinkCollection",
        "label": "requests",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(RequestItem)1612_storage)"
      },
      {
        "astId": 1624,
        "contract": "contracts/LinkCollection.sol:LinkCollection",
        "label": "quorum",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1626,
        "contract": "contracts/LinkCollection.sol:LinkCollection",
        "label": "latestId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1640,
        "contract": "contracts/LinkCollection.sol:LinkCollection",
        "label": "validators",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(ValidatorItem)1635_storage)"
      },
      {
        "astId": 1643,
        "contract": "contracts/LinkCollection.sol:LinkCollection",
        "label": "validatorItems",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(Ballot)1622": {
        "encoding": "inplace",
        "label": "enum LinkCollection.Ballot",
        "numberOfBytes": "1"
      },
      "t_enum(RequestStatus)1589": {
        "encoding": "inplace",
        "label": "enum LinkCollection.RequestStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ValidatorStatus)1629": {
        "encoding": "inplace",
        "label": "enum LinkCollection.ValidatorStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_enum(Ballot)1622)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum LinkCollection.Ballot)",
        "numberOfBytes": "32",
        "value": "t_enum(Ballot)1622"
      },
      "t_mapping(t_address,t_struct(ValidatorItem)1635_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LinkCollection.ValidatorItem)",
        "numberOfBytes": "32",
        "value": "t_struct(ValidatorItem)1635_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(RequestItem)1612_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LinkCollection.RequestItem)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestItem)1612_storage"
      },
      "t_struct(RequestItem)1612_storage": {
        "encoding": "inplace",
        "label": "struct LinkCollection.RequestItem",
        "members": [
          {
            "astId": 1591,
            "contract": "contracts/LinkCollection.sol:LinkCollection",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1593,
            "contract": "contracts/LinkCollection.sol:LinkCollection",
            "label": "email",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 1595,
            "contract": "contracts/LinkCollection.sol:LinkCollection",
            "label": "wallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1597,
            "contract": "contracts/LinkCollection.sol:LinkCollection",
            "label": "signature",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          },
          {
            "astId": 1599,
            "contract": "contracts/LinkCollection.sol:LinkCollection",
            "label": "agreement",
            "offset": 0,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 1601,
            "contract": "contracts/LinkCollection.sol:LinkCollection",
            "label": "opposition",
            "offset": 4,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 1603,
            "contract": "contracts/LinkCollection.sol:LinkCollection",
            "label": "abstaining",
            "offset": 8,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 1608,
            "contract": "contracts/LinkCollection.sol:LinkCollection",
            "label": "ballots",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_enum(Ballot)1622)"
          },
          {
            "astId": 1611,
            "contract": "contracts/LinkCollection.sol:LinkCollection",
            "label": "status",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(RequestStatus)1589"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(ValidatorItem)1635_storage": {
        "encoding": "inplace",
        "label": "struct LinkCollection.ValidatorItem",
        "members": [
          {
            "astId": 1631,
            "contract": "contracts/LinkCollection.sol:LinkCollection",
            "label": "validator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1634,
            "contract": "contracts/LinkCollection.sol:LinkCollection",
            "label": "status",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(ValidatorStatus)1629"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}